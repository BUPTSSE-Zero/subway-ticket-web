import groovy.swing.SwingBuilder

apply plugin: 'java'
apply plugin: 'war'
apply plugin: 'maven'

sourceCompatibility = 1.7

repositories {
    mavenCentral()
}

dependencies {
    testCompile group: 'junit', name: 'junit', version: '4.11'
    compile (
            'mysql:mysql-connector-java:5.1.+',
            'redis.clients:jedis:2.8.+',
            'org.slf4j:slf4j-log4j12:+',
            'com.google.code.gson:gson:2.6.+',
            'javax.servlet:javax.servlet-api:4.+',
            'org.eclipse.persistence:org.eclipse.persistence.jpa:+',
            'javax.validation:validation-api:1.1.+',
            'javax.faces:javax.faces-api:+',
            'javax.ejb:ejb-api:3.0',
            'org.primefaces:primefaces:+',
            'io.jsonwebtoken:jjwt:+',
            'javax.ws.rs:javax.ws.rs-api:+',
            'org.glassfish.jersey.containers:jersey-container-servlet:2.+',
            'net.glxn:qrgen:+',
            'org.quartz-scheduler:quartz:+',
            'org.quartz-scheduler:quartz-jobs:+',
    )

    providedRuntime 'javax.servlet:javax.servlet-api:4.+'
    providedRuntime 'javax.validation:validation-api:1.1.+'
    providedRuntime 'javax.faces:javax.faces-api:+'
    providedRuntime 'javax.ejb:ejb-api:3.0'
    providedRuntime 'org.eclipse.persistence:org.eclipse.persistence.jpa:+'
    providedRuntime 'org.eclipse.persistence:org.eclipse.persistence.moxy:+'
    providedRuntime 'org.glassfish.jersey.containers:jersey-container-servlet:2.+'
}


ext{
    CREATE_MYSQL_ACCOUNT_SQL_PATH = 'setup/CreateSystemDBAccount.sql'
	INIT_SYSTEM_DB_SQL_PATH = 'setup/InitSystemDB.sql'
    BUILD_WAR_PATH = 'build/libs/subway-ticket-web.war'
    GLASSFISH_DOMAIN = 'subway-ticket-server'
    WEBAPP_NAME = 'subway-ticket-web'
    SUBWAY_TICKET_PRICE_CSV = (System.getProperties().getProperty("user.dir") + '/setup/TicketPrice.csv').replace("\\", "/")
    password = null
	if(System.getProperties().getProperty("os.name").toLowerCase().contains("windows"))		//In Windows
		ASADMIN_EXEC = 'asadmin.bat'
	else	//In Linux
		ASADMIN_EXEC = 'asadmin'
    mavenURL = 'http://101.200.144.204:16082/nexus/content/repositories/releases'
    mavenAccount = 'admin'
    mavenPassword = null
}

def inputPassword = {
	if (password == null) {
		if(System.console() == null) {
			new SwingBuilder().edt {
				dialog(modal: true, title: 'Enter password', alwaysOnTop: true, resizable: true, locationRelativeTo: null, pack: true, show: true) {
					vbox {
						label(text: "Please enter MySQL root password:");
						def input1 = passwordField();
						button(defaultButton: true, text: 'OK', actionPerformed: {
							password = input1.password;
							dispose();
						});
					}
				}
			}
		} else {
			password = System.console().readPassword("\nPlease enter MySQL root password: ");
		}
	}
}

task initProjectDB(){
	doLast{
		println 'Init project database...'
		inputPassword();
		exec{
			commandLine 'mysql', '--default-character-set=utf8', '-uroot', '-p' + password, '-e', 'source ' + INIT_SYSTEM_DB_SQL_PATH
		}
        exec{
            commandLine 'mysql', '--default-character-set=utf8', '--local-infile', '-uroot', '-p' + password, '-e', 'load data local infile \'' + SUBWAY_TICKET_PRICE_CSV +
                    '\' into table SubwayTicketDB.TicketPrice fields terminated by \',\' ignore 1 lines (SubwayStationAID, SubwayStationBID, Price); '
        }
	}
}

task initWebServer(dependsOn: 'initProjectDB'){
    description 'Init web server, including creating a new MySQL account and a new GlassFish domain named micronurse-server.'
    doLast {
        println 'Create new MySQL account...'
        inputPassword()

		try{
			exec{
				commandLine 'mysql', '-uroot', '-p' + password, '-e', 'DROP USER \'SubwayTicketWeb\'@\'127.0.0.1\';'
			}
		}catch (Exception e){}
		
        exec {
            commandLine 'mysql', '-uroot', '-p' + password, '-e', 'source ' + CREATE_MYSQL_ACCOUNT_SQL_PATH + ';'
        }

        exec {
            commandLine ASADMIN_EXEC, 'create-domain', '--portbase', '16000', '--nopassword', GLASSFISH_DOMAIN
        }
    }
}

task startWebServer {
    doLast {
        exec {
            commandLine ASADMIN_EXEC, 'start-domain', GLASSFISH_DOMAIN
        }
    }
}

task stopWebServer {
    doLast {
        exec {
            commandLine ASADMIN_EXEC, 'stop-domain', GLASSFISH_DOMAIN
        }
    }
}

task deployWebapp(dependsOn: ['build']){
    description 'Build and deploy(or redeploy) the web app on Glassfish.'
    doLast {
        try {
            exec {
                commandLine ASADMIN_EXEC, '--port', '16048', '--user', 'admin', 'undeploy', WEBAPP_NAME
            }
        }catch (Exception e){}
        exec{
            commandLine ASADMIN_EXEC, '--port', '16048', '--user', 'admin', 'deploy', '--name', WEBAPP_NAME, BUILD_WAR_PATH
        }
        println 'Deploy finished. Please visit http://localhost:16080/' + WEBAPP_NAME
    }
}

task modelsJar(type: Jar, dependsOn:classes) {
    baseName 'subway-ticket-models'
    from('build/classes/main')
    include(
            'com/subwayticket/model/result/*',
            'com/subwayticket/model/request/*',
            'com/subwayticket/model/PublicResultCode.class',
            'com/subwayticket/database/model/*'
    )
}

artifacts {
    archives(modelsJar){
        name = 'models_jar'
    }
}

def mavenAuth = {
    println "\nAuthenticate for remote Maven repository..."
    if(System.console() == null) {
        new SwingBuilder().edt {
            dialog(modal: true, title: 'Remote Maven Repository Authentication', alwaysOnTop: true, resizable: true, locationRelativeTo: null, pack: true, show: true) {
                vbox {
                    def urlInput = null;
                    def accountInput = null;
                    def passwordInput = null;
                    hbox{
                        label(text: "Maven Repository URL:");
                        urlInput = textField(mavenURL);
                    }
                    hbox{
                        label(text: "Account:");
                        accountInput = textField(mavenAccount);
                    }
                    hbox{
                        label(text: "Password:");
                        passwordInput = passwordField();
                    }

                    button(defaultButton: true, text: 'OK', actionPerformed: {
                        mavenURL = urlInput.text;
                        mavenAccount = accountInput.text;
                        mavenPassword = passwordInput.password;
                        dispose();
                    });
                }
            }
        }
    } else {
        def temp = System.console().readLine("\nMaven Repository URL(%s):", mavenURL);
        if(!temp.isEmpty())
            mavenURL = temp;
        temp = System.console().readLine("Account(%s):", mavenAccount);
        if(!temp.isEmpty())
            mavenAccount = temp;
        mavenPassword = System.console().readPassword("Password:");
    }
}

task mavenLocalInstall(type: Upload) {
    description "Installs the artifacts to the local Maven repository."
    configuration = configurations['archives']
    repositories.mavenDeployer {
        repository url: "file://${System.properties['user.dir']}/maven-repository"
        addFilter('models_jar') { artifact, file ->
            artifact.name == 'models_jar'
        }
        pom('models_jar').groupId = 'com.subwayticket'
        pom('models_jar').artifactId = 'subway-ticket-models'
        pom('models_jar').version = '0.11'
        pom('models_jar').withXml {
            // Clear dependencies
            asNode().remove(asNode().dependencies.first())
        }
    }
}

task mavenRemoteSync(type: Upload) {
    description "Syncs the artifacts to the remote Maven repository."
    configuration = configurations['archives']
    doFirst {
        mavenAuth()
        repositories.mavenDeployer {
            repository(url: mavenURL) {
                authentication(userName: '' + mavenAccount,
                        password: '' + mavenPassword)
            }
            addFilter('models_jar') { artifact, file ->
                artifact.name == 'models_jar'
            }
            pom('models_jar').groupId = 'com.subwayticket'
            pom('models_jar').artifactId = 'subway-ticket-models'
            pom('models_jar').version = '0.11'
            pom('models_jar').withXml {
                // Clear dependencies
                asNode().remove(asNode().dependencies.first())
            }
        }
    }
}
